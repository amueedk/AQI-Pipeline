name: Daily Retrain

on:
  schedule:
    - cron: '0 2 * * *' # daily at 02:00 UTC
  workflow_dispatch: {}

jobs:
  retrain:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system deps
        run: sudo apt-get update && sudo apt-get install -y build-essential libmysqlclient-dev

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # runtime deps for training and registry
          pip install tensorflow==2.15.* scikit-learn==1.6.* fastapi uvicorn shap lightgbm

      - name: Retrain banded models and register
        env:
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
          # ensure training uploads to registry/datasets
          REGISTER_TO_HOPSWORKS: '1'
        run: |
          python lstm_direct_multi_horizon_v1.py

      - name: Promote/sync Production copies (Datasets) for app
        env:
          HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
        run: |
          python - <<'PY'
import os
from model_registry_utils import download_registry_artifacts
from config import HOPSWORKS_CONFIG
import hopsworks

api=os.getenv('HOPSWORKS_API_KEY'); proj=HOPSWORKS_CONFIG['project_name']
pr=hopsworks.login(api_key_value=api, project=proj)
mr=pr.get_model_registry()
for name in ['direct_lstm_short','direct_lstm_midlong','direct_lstm_multi_horizon']:
    try:
        mdl = mr.get_model(name)
        # Download latest to temp and re-upload to Datasets /Models/<name>/Production
        import tempfile, shutil
        tmp=tempfile.mkdtemp()
        try:
            for attr in ['download','download_model']:
                if hasattr(mdl, attr):
                    try:
                        getattr(mdl, attr)(tmp, overwrite=True)
                    except TypeError:
                        getattr(mdl, attr)(tmp)
                    break
            ds=pr.get_dataset_api()
            ds.upload(tmp, f"/Models/{name}/Production", overwrite=True)
            print(f"Synced Production for {name}")
        finally:
            shutil.rmtree(tmp, ignore_errors=True)
    except Exception as e:
        print(f"Skip {name}: {e}")
PY


