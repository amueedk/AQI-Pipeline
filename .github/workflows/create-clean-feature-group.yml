name: Create Clean Feature Group

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "yes" to confirm you want to create the clean feature group'
        required: true
        default: 'no'

jobs:
  create-clean-feature-group:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check for good data CSV
      run: |
        if [ ! -f "good_hopsworks_data_20250716_204528.csv" ]; then
          echo "❌ Good data CSV not found!"
          exit 1
        fi
        echo "✅ Good data CSV found"
        ls -la good_hopsworks_data_20250716_204528.csv
        
    - name: Create clean feature group
      env:
        HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
      run: |
        echo "=== Creating Clean Feature Group ==="
        echo "This will create 'multan_aqi_features_clean' with only Celsius temperature data"
        echo "Confirming input: ${{ github.event.inputs.confirm }}"
        
        if [ "${{ github.event.inputs.confirm }}" != "yes" ]; then
          echo "❌ Confirmation not received. Exiting."
          exit 1
        fi
        
        python create_new_feature_group.py
        
    - name: Verify feature group creation
      env:
        HOPSWORKS_API_KEY: ${{ secrets.HOPSWORKS_API_KEY }}
      run: |
        echo "=== Verifying Feature Group Creation ==="
        python -c "
        import pandas as pd
        from hopsworks_integration import HopsworksUploader
        from config import HOPSWORKS_CONFIG
        
        # Connect to Hopsworks
        uploader = HopsworksUploader(
            api_key=HOPSWORKS_CONFIG['api_key'],
            project_name=HOPSWORKS_CONFIG['project_name']
        )
        
        if uploader.connect():
            # Try to read from the new feature group
            fg = uploader.fs.get_or_create_feature_group(
                name='multan_aqi_features_clean',
                version=1
            )
            
            try:
                df = fg.read()
                print(f'✅ Feature group created successfully!')
                print(f'📊 Records: {len(df)}')
                print(f'📋 Columns: {len(df.columns)}')
                
                if 'temperature' in df.columns:
                    temp_stats = df['temperature'].agg(['min', 'max', 'mean'])
                    print(f'🌡️  Temperature range: {temp_stats[\"min\"]:.2f} to {temp_stats[\"max\"]:.2f}°C')
                    print(f'🌡️  Temperature mean: {temp_stats[\"mean\"]:.2f}°C')
                
                print(f'🔗 Feature group URL: https://c.app.hopsworks.ai:443/p/{HOPSWORKS_CONFIG[\"project_name\"]}/fs/featuregroups')
                
            except Exception as e:
                print(f'❌ Error reading feature group: {e}')
        else:
            print('❌ Failed to connect to Hopsworks')
        "
        
    - name: Summary
      run: |
        echo "=== Summary ==="
        echo "✅ Clean feature group creation completed"
        echo "📁 Feature group name: multan_aqi_features_clean"
        echo "📊 Contains: 337 records with Celsius temperatures only"
        echo "🚫 Excludes: Kelvin temperatures and duplicate weather data"
        echo ""
        echo "Next steps:"
        echo "1. Verify the feature group in Hopsworks UI"
        echo "2. Try to delete the old corrupted feature group later"
        echo "3. Consider renaming the new feature group to 'multan_aqi_features'"
        echo "4. Update your automated pipeline to use the clean data" 